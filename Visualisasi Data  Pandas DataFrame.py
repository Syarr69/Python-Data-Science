# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jP-iOKKpG6H7OeSnXeAN2L1V5jh80JAi

# **SERIES**

Series merupakan struktur data dasar dalam Pandas
yang dapat berisi tipe data seperti integer, string, dll. Dan mendukung tipe data sama 
atau campuran. Contoh series object
"""

# Membuat Series 

import pandas as pd
data = [1,2,3,4]
series1 = pd.Series(data)
series1

# Cek Tipe Struktur Data Series atau Bukan

type(series1)

# Ubah Nama Index

series1 = pd.Series(data, index = ['a','b','c','d'])
series1

"""# **DATA FRAME**

DataFrame merupakan array dua dimensi dengan baris dan kolom. Struktur data ini 
merupakan cara paling standar untuk menyimpan data. Secara sederhana, DataFrame 
merupakan tabel/data tabular. Setiap kolom pada DataFrame merupakan objek dari 
Series, dan baris terdiri dari elemen yang ada pada Series. Contoh DataFrame. 
"""

# DataFrame Menggunakan List

import pandas as pd
data = [1,2,3,4]
df = pd.DataFrame(data)
df

# DataFrame Menggunakan Dictionary

dictionary = {'buah ':['Apel','Jeruk', 'Lemon'], 'Jumlah':[100,80,65]}
df = pd.DataFrame(dictionary)
df

# DataFrame Menggunakan List dengan Tipe Data Campuran

import pandas as pd
data = [['Amsyar',80,75,85,80.5],
        ['Indra',70,75,80,76.6],
        ['Fahmi',60,65,70,68.5]]
index = [1,2,3]
kolom = ['Nama','Tugas','UTS','UAS','Rata-Rata']
df = pd.DataFrame(data, index, kolom)
df

# DataFrame Menggunakan List & Dictionary dengan Tipe Data Campuran

import pandas as pd
nama = ['Amsyar','Indra','Fahmi']
tugas = [80,70,60]
uts = [75,75,65]
uas = [85,80,70]
ratarata = [80.5,76.6,68.5]
df2 = pd.DataFrame({'Nama':nama,'Tugas':tugas,'UTS':uts,'UAS':uas,'Rata-Rata':ratarata})
df2

"""# **Merge, Join, & Concatenate DataFrame**

Ketiga fungsi ini pengertiannya adalah operasi penggabungan. Perbedaannya adalah
sebagai berikut.

# **Merge**

Merge adalah operasi penggabungan antara DataFrame Objects.
"""

# DATA PERTAMA
import pandas as pd
nama = ['Asmega','Diana','Efi']
tugas = [90,85,80]
jurusan = ['MJ','EP','AK']
df3 = pd.DataFrame({'Nama':nama, 'Tugas':tugas, 'Jurusan':jurusan})
df3

# DATA KEDUA
nama = ['Asmega','Diana','Vina']
uts = [85,80,75]
jurusan = ['MJ','EP','PS']
df4 = pd.DataFrame({'Nama':nama, 'UTS':uts, 'Jurusan':jurusan})
df4

# INNER MERGE
df3.merge(df4)

# LEFT MERGE
df3.merge(df4, on='Nama', how='left')

# RIGHT MERGE
df3.merge(df4, on='Nama', how='right')

# OUTER MERGE
df3.merge(df4, on='Nama', how='outer')

"""# **Join**

Join adalah operasi penggabungan dengan menggunakan index.
"""

# DATA PERTAMA
nama = ['Asmega','Diana','Efi']
tugas = [90,85,80]
jurusan = ['MJ','EP','AK']
df3 = pd.DataFrame({'Nama':nama, 'Tugas':tugas, 'Jurusan':jurusan}, index=['L1','L2','L3'])
df3

# DATA KEDUA
nama = ['Asmega','Diana','Vina']
uts = [85,80,75]
jurusan = ['MJ','EP','PS']
df4 = pd.DataFrame({'Nama B':nama, 'UTS':uts, 'Jurusan B':jurusan}, index=['L2','L3','L4'])
df4

# INNER JOIN
df3.join(df4, how='inner')

# LEFT JOIN
df3.join(df4, how='left')

# RIGHT JOIN
df3.join(df4, how='right')

# OUTER JOIN
df3.join(df4, how='outer')

"""# **Concatenate**

Concatenate adalah operasi penggabungan objek DataFrame secara vertical
"""

pd.concat([df3,df4], sort='False')

"""# **Pandas DataFrame - Import Data CSV**

Pada tahap ini akan dibahas mengenai cara import data CSV ke dalam Panda DataFrame
dan mengolah datanya.

# **Import Data CSV**
"""

import pandas as pd

# membaca dataset dan store ke dataframe
sample = pd.read_csv("Iris.csv")

# print
sample

"""# **Macam - Macam Operasi**

Fungsi-fungsi yang dapat dilakukan oleh Pandas DataFrame adalah sebagai berikut.

# **1. Head**
"""

# Head(), menampilkan 5 records pertama
sample.head()

"""# **2. Tail()**"""

# Tail(), menampilkan 5 records terakhir
sample.tail()

"""# **3. Shape**"""

# Shape, menampilkan jumlah baris dan kolom pada DataFrame
sample.shape

"""# **4. Mean, Median, dan Standar Deviasi**"""

# Mean adaah rata-rata
sample.mean()

# Median adalah nilai tengah dari data yang telah diurut dari terkecil hingga terbesar
sample.median()

# Standar Deviasi
sample.std()

"""# **5. Max, Min, Count**"""

# Max untuk mencari nilai tertinggi
sample.max()

# Min untuk mencari nilai terendah
sample.min()

# Jumlah non null record pada setiap kolom
sample.count()

"""# **6. Describe()**"""

# Describe adalah ringkasan statistik data
sample.describe()

"""# **7. Rename dan Drop Kolom**"""

# Rename Kolom
sample = sample.rename(columns={'Id':'No Induk'})
sample

# Drop atau menghilangkan kolom
sample = sample.drop(columns=['Species'])
sample

"""# **9. Loc**"""

# Menampilkan record 1 kolom 
sample.loc[:,"No Induk"]

# Menampilan record dari indeks ke-0 sampai ke-3 dari kolom
sample.loc[0:3,:"No Induk"]

# Menampilan record sampai indeks ke-3 dari kolom No Induk dan SepalLengthCm
sample.loc[:3,"No Induk":"SepalLengthCm"]

"""# **10. Mengisi nilai sama untuk 1 kolom**"""

# Mengisi nilai 9 untuk kolom PetalLengthCm
sample['PetalLengthCm']=9
sample

"""# **11. Sorting**"""

# Sorting berdasarkan ascending dari kolom SepalWidthCm
sample.sort_values(by='SepalWidthCm')

# Sorting berdasarkan descending dari kolom SepalWidthCm
sample.sort_values(by='SepalWidthCm', ascending=False)

"""# **12. Filter**"""

# Filter record yang PetalWidthCm lebih dari 1.2 dan akan menampilkan status True or False
sample['PetalWidthCm'] > 1.2

# Filter, kemudian tampilkan record-nya
filter1 = sample['PetalWidthCm'] > 1.2
filterbaru = sample[filter1]
filterbaru

# Filter dengan 2 paramaeter 
filter2 = (sample['PetalWidthCm'] > 1.2) & (sample['No Induk'] == 'PetalLengthCm')
filterbaru2 = sample[filter2]
filterbaru2